#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Sun Aug 27 03:36:22 2023
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
                          ;# script wasn't run conservatively originally
if {$force_conservative} {
        set send_slow {1 .1}
        proc send {ignore arg} {
                sleep .1
                exp_send -s -- $arg
        }
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn /root/.local/bin/protonvpn init
match_max 100000
expect -re ".*Enter your ProtonVPN OpenVPN username: "
send -- "$env(PVPN_UNAME)\r"
expect -exact "$env(PVPN_UNAME)\r
Enter your ProtonVPN OpenVPN password: "
send -- "$env(PVPN_PASS)\r"
expect -exact "\r
Confirm your ProtonVPN OpenVPN password: "
send -- "$env(PVPN_PASS)\r"
expect -exact "\r
\r
Please choose your ProtonVPN Plan\r
1) Free\r
2) Basic\r
3) Plus\r
4) Visionary\r
\r
Your plan: "
send -- "3\r"
expect -exact "3\r
\r
Choose the default OpenVPN protocol.\r
OpenVPN can act on two different protocols: UDP and TCP.\r
UDP is preferred for speed but might be blocked in some networks.\r
TCP is not as fast but a lot harder to block.\r
Input your preferred protocol. (Default: UDP)\r
\r
1) UDP\r
2) TCP\r
\r
Your choice: "
send -- "1\r"
expect -re ".*Is this information correct.*: "
send -- "y\r"
expect eof
